"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import { sendNotificationCommand, sendEmergencyNotification } from "@/lib/device-notifications"
import { Bell, AlertTriangle, MessageSquare, Volume2, Monitor, Loader2, VolumeX } from "lucide-react"

interface DeviceNotificationButtonProps {
  deviceId: string
  adminId: string
  disabled?: boolean
}

export function DeviceNotificationButton({ deviceId, adminId, disabled = false }: DeviceNotificationButtonProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [notificationType, setNotificationType] = useState<"alert" | "emergency" | "warning">("alert")
  const [message, setMessage] = useState("")
  const [channels, setChannels] = useState<("sound" | "display")[]>(["sound", "display"])
  const [enableTTS, setEnableTTS] = useState(true)
  const { toast } = useToast()

  const handleChannelChange = (channel: "sound" | "display", checked: boolean) => {
    if (checked) {
      setChannels([...channels, channel])
    } else {
      setChannels(channels.filter((c) => c !== channel))
    }
  }

  const handleSendNotification = async () => {
    if (!message.trim()) {
      toast({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        description: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ",
        variant: "destructive",
      })
      return
    }

    if (channels.length === 0) {
      toast({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á",
        description: "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TTS
      const extendedChannels = channels.map((channel) => {
        if (channel === "sound") {
          return enableTTS ? "sound_with_tts" : "sound"
        }
        return channel
      }) as ("sound" | "sound_with_tts" | "display")[]

      const commandId = await sendNotificationCommand(deviceId, adminId, notificationType, message, extendedChannels)

      toast({
        title: "‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${deviceId} ‡πÅ‡∏•‡πâ‡∏ß${enableTTS ? " (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)" : ""}`,
      })

      // Reset form
      setMessage("")
      setChannels(["sound", "display"])
      setNotificationType("alert")
      setEnableTTS(true)
      setIsOpen(false)

      console.log(`üì± Notification sent to device ${deviceId}, command ID: ${commandId}`)
    } catch (error) {
      console.error("‚ùå Error sending notification:", error)
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleEmergencyNotification = async () => {
    setIsLoading(true)
    try {
      const commandId = await sendEmergencyNotification(deviceId, adminId)

      toast({
        title: "‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${deviceId} ‡πÅ‡∏•‡πâ‡∏ß (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)`,
      })

      setIsOpen(false)
      console.log(`üö® Emergency notification sent to device ${deviceId}, command ID: ${commandId}`)
    } catch (error) {
      console.error("‚ùå Error sending emergency notification:", error)
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÑ‡∏î‡πâ",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case "emergency":
        return "destructive"
      case "warning":
        return "default"
      default:
        return "secondary"
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "emergency":
        return <AlertTriangle className="h-4 w-4" />
      case "warning":
        return <Bell className="h-4 w-4" />
      default:
        return <MessageSquare className="h-4 w-4" />
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" disabled={disabled}>
          <MessageSquare className="mr-2 h-4 w-4" />
          ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5" />
            ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
          </DialogTitle>
          <DialogDescription>
            ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå {deviceId}
            <br />
            <span className="text-xs text-muted-foreground">üîä ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á</span>
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="type">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</Label>
            <Select value={notificationType} onValueChange={(value: any) => setNotificationType(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="alert">
                  <div className="flex items-center gap-2">
                    <MessageSquare className="h-4 w-4" />
                    ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                  </div>
                </SelectItem>
                <SelectItem value="warning">
                  <div className="flex items-center gap-2">
                    <Bell className="h-4 w-4" />
                    ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                  </div>
                </SelectItem>
                <SelectItem value="emergency">
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4" />
                    ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="message">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</Label>
            <Textarea
              id="message"
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á... (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á)"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              rows={3}
            />
            <p className="text-xs text-muted-foreground">üí° ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡∏ü‡∏±‡∏á</p>
          </div>

          <div className="space-y-3">
            <Label>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</Label>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="sound"
                  checked={channels.includes("sound")}
                  onCheckedChange={(checked) => handleChannelChange("sound", checked as boolean)}
                />
                <Label htmlFor="sound" className="flex items-center gap-2 cursor-pointer">
                  <Volume2 className="h-4 w-4" />
                  ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô + ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                </Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="display"
                  checked={channels.includes("display")}
                  onCheckedChange={(checked) => handleChannelChange("display", checked as boolean)}
                />
                <Label htmlFor="display" className="flex items-center gap-2 cursor-pointer">
                  <Monitor className="h-4 w-4" />
                  ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                </Label>
              </div>
            </div>

            {channels.includes("sound") && (
              <div className="ml-6 space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="enable-tts"
                    checked={enableTTS}
                    onCheckedChange={(checked) => setEnableTTS(checked as boolean)}
                  />
                  <Label htmlFor="enable-tts" className="flex items-center gap-2 cursor-pointer text-sm">
                    {enableTTS ? <Volume2 className="h-3 w-3" /> : <VolumeX className="h-3 w-3" />}
                    ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Text-to-Speech)
                  </Label>
                </div>
                <p className="text-xs text-muted-foreground ml-5">
                  {enableTTS ? "üîä ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚Üí ‡∏´‡∏¢‡∏∏‡∏î 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" : "üîä ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)"}
                </p>
              </div>
            )}
          </div>

          <div className="flex items-center gap-2">
            <Badge variant={getTypeColor(notificationType)}>
              {getTypeIcon(notificationType)}
              <span className="ml-1">
                {notificationType === "emergency" ? "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô" : notificationType === "warning" ? "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" : "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"}
              </span>
            </Badge>
            <span className="text-sm text-muted-foreground">
              ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á: {channels.length} ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á
              {channels.includes("sound") && enableTTS && " (‡∏û‡∏£‡πâ‡∏≠‡∏° TTS)"}
            </span>
          </div>
        </div>

        <DialogFooter className="flex gap-2">
          <Button variant="destructive" onClick={handleEmergencyNotification} disabled={isLoading} className="flex-1">
            {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <AlertTriangle className="mr-2 h-4 w-4" />}
            ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
          </Button>
          <Button onClick={handleSendNotification} disabled={isLoading || !message.trim()} className="flex-1">
            {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <MessageSquare className="mr-2 h-4 w-4" />}
            ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
