#!/usr/bin/env python3
"""
‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô PC
"""

import subprocess
import sys
import platform

def install_package(package):
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python package"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    print("üîß Installing PC Test Requirements...")
    print(f"Platform: {platform.system()} {platform.release()}")
    
    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ packages ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    packages = []
    
    # TTS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
    if platform.system() == "Windows":
        packages.append("pyttsx3")
    
    # Firebase (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á)
    packages.extend([
        "pyrebase4",
        "requests"
    ])
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages
    for package in packages:
        print(f"üì¶ Installing {package}...")
        if install_package(package):
            print(f"‚úÖ {package} installed successfully")
        else:
            print(f"‚ùå Failed to install {package}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TTS
    print("\nüó£Ô∏è TTS Setup Instructions:")
    
    if platform.system() == "Windows":
        print("‚úÖ Windows: pyttsx3 installed (should work out of the box)")
    elif platform.system() == "Darwin":  # macOS
        print("‚úÖ macOS: Uses built-in 'say' command (no additional setup needed)")
    elif platform.system() == "Linux":
        print("‚ö†Ô∏è Linux: Install espeak with:")
        print("   sudo apt-get install espeak espeak-data-th")
        print("   or")
        print("   sudo apt-get install speech-dispatcher")
    
    print("\nüéâ Setup completed! Run the test with:")
    print("   python Driver-Fatigue-Detector_PC/test_notification_system.py")

if __name__ == "__main__":
    main()
