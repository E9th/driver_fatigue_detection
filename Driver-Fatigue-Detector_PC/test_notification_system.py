#!/usr/bin/env python3
"""
Driver Fatigue Detection System - PC Test Version
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô PC
"""

import sys
import os
import time
import threading
import json
import subprocess
import platform
from datetime import datetime

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OS
IS_WINDOWS = platform.system() == "Windows"
IS_MAC = platform.system() == "Darwin"
IS_LINUX = platform.system() == "Linux"

class PCNotificationHandler:
    def __init__(self):
        self.is_listening = False
        self.listener_thread = None
        self.current_notifications = {}
        
        # Firebase config (‡πÉ‡∏™‡πà config ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
        self.firebase_config = {
            "databaseURL": "YOUR_FIREBASE_DATABASE_URL",
            "apiKey": "YOUR_API_KEY",
            "authDomain": "YOUR_AUTH_DOMAIN",
            "projectId": "YOUR_PROJECT_ID"
        }
        
        # Device ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        self.device_id = "TEST_DEVICE_PC"
        
        print(f"üñ•Ô∏è PC Notification Handler initialized")
        print(f"   OS: {platform.system()} {platform.release()}")
        print(f"   Device ID: {self.device_id}")
        
    def start_listening(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)"""
        if self.is_listening:
            return
            
        self.is_listening = True
        self.listener_thread = threading.Thread(target=self._simulate_listening, daemon=True)
        self.listener_thread.start()
        print("üîî PC Notification handler started listening...")
        
    def stop_listening(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        self.is_listening = False
        if self.listener_thread:
            self.listener_thread.join(timeout=5)
        print("üîî PC Notification handler stopped listening")
    
    def _simulate_listening(self):
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Firebase"""
        print("üëÇ Simulating Firebase listening...")
        print("üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'test' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        
        while self.is_listening:
            try:
                # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å console
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå Error in listening loop: {e}")
                time.sleep(5)
    
    def test_notification(self, message="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", notification_type="alert", enable_tts=True):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        print(f"\nüß™ Testing notification...")
        print(f"   Message: {message}")
        print(f"   Type: {notification_type}")
        print(f"   TTS: {enable_tts}")
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        notification_data = {
            "message": message,
            "type": notification_type,
            "channels": ["sound_with_tts" if enable_tts else "sound", "display"],
            "priority": "high" if notification_type == "emergency" else "medium",
            "timestamp": datetime.now().isoformat()
        }
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        self._handle_test_notification("TEST_001", notification_data)
    
    def _handle_test_notification(self, notification_id, notification_data):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        try:
            message = notification_data.get('message', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö')
            channels = notification_data.get('channels', ['sound', 'display'])
            notification_type = notification_data.get('type', 'alert')
            priority = notification_data.get('priority', 'medium')
            
            print(f"\nüîî Processing test notification {notification_id}")
            print(f"   Type: {notification_type}")
            print(f"   Priority: {priority}")
            print(f"   Message: {message}")
            print(f"   Channels: {channels}")
            
            results = {}
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á
            for channel in channels:
                try:
                    if channel == "sound" or channel == "sound_with_tts":
                        enable_tts = channel == "sound_with_tts"
                        results["sound"] = self._play_pc_sound_alert(message, priority, enable_tts)
                    elif channel == "display":
                        results["display"] = self._show_pc_display_alert(message, priority)
                except Exception as e:
                    print(f"‚ùå Error in channel {channel}: {e}")
                    results[channel.replace("_with_tts", "")] = False
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            print(f"\n‚úÖ Test notification {notification_id} completed")
            for channel, success in results.items():
                status = "‚úÖ Success" if success else "‚ùå Failed"
                print(f"   {channel}: {status}")
                
        except Exception as e:
            print(f"‚ùå Error handling test notification {notification_id}: {e}")
    
    def _play_pc_sound_alert(self, message, priority, enable_tts=True):
        """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô PC"""
        try:
            print(f"\nüîä Playing PC sound alert...")
            print(f"   Priority: {priority}")
            print(f"   TTS Enabled: {enable_tts}")
            
            # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            beep_count = 3 if priority == "critical" else 2 if priority == "high" else 1
            
            for i in range(beep_count):
                print(f"üéµ Beep {i+1}/{beep_count}")
                self._play_system_beep()
                if i < beep_count - 1:
                    time.sleep(0.5)
            
            # ‡∏´‡∏¢‡∏∏‡∏î 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô TTS
            if enable_tts:
                print("‚è≥ Waiting 2 seconds before TTS...")
                time.sleep(2)
                
                # ‡πÄ‡∏•‡πà‡∏ô Text-to-Speech
                tts_success = self._play_pc_tts(message, priority)
                
                if not tts_success:
                    print("‚ö†Ô∏è TTS not available, showing text instead")
                    print(f"üì¢ TTS Message: '{message}'")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error playing PC sound alert: {e}")
            return False
    
    def _play_system_beep(self):
        """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á beep ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            if IS_WINDOWS:
                # Windows
                import winsound
                winsound.Beep(1000, 500)  # 1000Hz, 500ms
            elif IS_MAC:
                # macOS
                os.system("afplay /System/Library/Sounds/Glass.aiff")
            elif IS_LINUX:
                # Linux
                os.system("paplay /usr/share/sounds/alsa/Front_Left.wav 2>/dev/null || echo -e '\a'")
            else:
                # Fallback - terminal bell
                print("\a", end="", flush=True)
                
        except Exception as e:
            print(f"‚ö†Ô∏è System beep failed: {e}")
            print("\a", end="", flush=True)  # Fallback
    
    def _play_pc_tts(self, message, priority):
        """‡πÄ‡∏•‡πà‡∏ô Text-to-Speech ‡∏ö‡∏ô PC"""
        try:
            print(f"üó£Ô∏è Playing TTS: '{message}'")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            rate = 120 if priority == "critical" else 140 if priority == "high" else 160
            
            if IS_WINDOWS:
                return self._play_windows_tts(message, rate)
            elif IS_MAC:
                return self._play_mac_tts(message, rate)
            elif IS_LINUX:
                return self._play_linux_tts(message, rate)
            else:
                print("‚ö†Ô∏è TTS not supported on this platform")
                return False
                
        except Exception as e:
            print(f"‚ùå TTS error: {e}")
            return False
    
    def _play_windows_tts(self, message, rate):
        """Windows TTS"""
        try:
            import pyttsx3
            engine = pyttsx3.init()
            engine.setProperty('rate', rate)
            engine.setProperty('volume', 0.8)
            engine.say(message)
            engine.runAndWait()
            print("‚úÖ Windows TTS completed")
            return True
        except ImportError:
            print("‚ö†Ô∏è pyttsx3 not installed. Install with: pip install pyttsx3")
            return False
        except Exception as e:
            print(f"‚ùå Windows TTS failed: {e}")
            return False
    
    def _play_mac_tts(self, message, rate):
        """macOS TTS"""
        try:
            # ‡πÉ‡∏ä‡πâ say command ‡∏Ç‡∏≠‡∏á macOS
            subprocess.run(['say', '-r', str(rate), message], 
                         timeout=30, check=True)
            print("‚úÖ macOS TTS completed")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå macOS TTS failed: {e}")
            return False
        except FileNotFoundError:
            print("‚ö†Ô∏è 'say' command not found")
            return False
    
    def _play_linux_tts(self, message, rate):
        """Linux TTS"""
        try:
            # ‡∏•‡∏≠‡∏á espeak ‡∏Å‡πà‡∏≠‡∏ô
            subprocess.run(['espeak', '-s', str(rate), message], 
                         timeout=30, check=True)
            print("‚úÖ Linux TTS (espeak) completed")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            try:
                # ‡∏•‡∏≠‡∏á spd-say
                subprocess.run(['spd-say', message], 
                             timeout=30, check=True)
                print("‚úÖ Linux TTS (spd-say) completed")
                return True
            except (subprocess.CalledProcessError, FileNotFoundError):
                print("‚ö†Ô∏è TTS not available. Install with: sudo apt-get install espeak")
                return False
    
    def _show_pc_display_alert(self, message, priority):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ PC"""
        try:
            print(f"\nüì∫ PC Display Alert:")
            print(f"   Priority: {priority}")
            print(f"   Message: {message}")
            print(f"   Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            alert_data = {
                "message": message,
                "priority": priority,
                "timestamp": datetime.now().isoformat(),
                "type": "notification",
                "platform": "PC"
            }
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå alert
            os.makedirs("temp", exist_ok=True)
            with open('temp/pc_alert_notification.json', 'w', encoding='utf-8') as f:
                json.dump(alert_data, f, ensure_ascii=False, indent=2)
            
            print("‚úÖ Display alert saved to temp/pc_alert_notification.json")
            return True
            
        except Exception as e:
            print(f"‚ùå Error showing PC display alert: {e}")
            return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("=" * 60)
    print("üñ•Ô∏è Driver Fatigue Detection System - PC Test Version")
    print("üîî Notification System Tester")
    print("=" * 60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á notification handler
    handler = PCNotificationHandler()
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
        handler.start_listening()
        
        print("\nüìã Available commands:")
        print("  'test' - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
        print("  'emergency' - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô")
        print("  'custom' - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")
        print("  'no-tts' - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ TTS")
        print("  'quit' - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        
        while True:
            try:
                command = input("\nüéÆ Enter command: ").strip().lower()
                
                if command == "quit" or command == "q":
                    break
                elif command == "test":
                    handler.test_notification(
                        message="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà",
                        notification_type="alert",
                        enable_tts=True
                    )
                elif command == "emergency":
                    handler.test_notification(
                        message="‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏ß‡∏á‡∏ô‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
                        notification_type="emergency",
                        enable_tts=True
                    )
                elif command == "custom":
                    custom_message = input("üìù Enter custom message: ")
                    if custom_message.strip():
                        handler.test_notification(
                            message=custom_message,
                            notification_type="alert",
                            enable_tts=True
                        )
                elif command == "no-tts":
                    handler.test_notification(
                        message="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ Text-to-Speech",
                        notification_type="warning",
                        enable_tts=False
                    )
                else:
                    print("‚ùå Unknown command. Type 'quit' to exit.")
                    
            except KeyboardInterrupt:
                print("\nüõë Interrupted by user")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
        
    finally:
        print("\nüõë Shutting down...")
        handler.stop_listening()
        print("üëã Goodbye!")

if __name__ == "__main__":
    main()
