import threading
import time
from datetime import datetime
import subprocess
import os
from .firebase import db_handler, user_token, firebase_connected

class CallHandler:
    def __init__(self):
        self.is_listening = False
        self.listener_thread = None
        self.current_calls = {}
        
    def start_listening(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å Firebase"""
        if self.is_listening:
            return
            
        self.is_listening = True
        self.listener_thread = threading.Thread(target=self._listen_for_calls, daemon=True)
        self.listener_thread.start()
        print("üìû Call handler started listening...")
    
    def stop_listening(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏ó‡∏£"""
        self.is_listening = False
        if self.listener_thread:
            self.listener_thread.join(timeout=5)
        print("üìû Call handler stopped listening")
    
    def _listen_for_calls(self):
        """‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å Firebase"""
        from .firebase import DEVICE_ID
        
        while self.is_listening:
            try:
                if not firebase_connected or not db_handler or not user_token:
                    time.sleep(5)
                    continue
                
                # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà pending
                calls_data = db_handler.child("devices").child(DEVICE_ID).child("commands").child("calls").get(user_token)
                
                if calls_data.val():
                    for call_id, call_data in calls_data.val().items():
                        if call_data.get('status') == 'pending' and call_id not in self.current_calls:
                            self._handle_call_command(call_id, call_data)
                
                time.sleep(2)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                print(f"‚ùå Error listening for calls: {e}")
                time.sleep(5)
    
    def _handle_call_command(self, call_id, call_data):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏ó‡∏£"""
        from .firebase import DEVICE_ID
        
        try:
            self.current_calls[call_id] = call_data
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô calling
            self._update_call_status(call_id, "calling")
            
            target_phone = call_data.get('targetPhone')
            message = call_data.get('message', '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏ß‡∏á‡∏ô‡∏≠‡∏ô')
            
            print(f"üìû Processing call command {call_id}")
            print(f"   Target: {target_phone}")
            print(f"   Message: {message}")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏à‡∏£‡∏¥‡∏á
            success = self._make_call(target_phone, message)
            
            if success:
                self._update_call_status(call_id, "completed")
                print(f"‚úÖ Call {call_id} completed successfully")
            else:
                self._update_call_status(call_id, "failed", "Failed to make call")
                print(f"‚ùå Call {call_id} failed")
                
        except Exception as e:
            print(f"‚ùå Error handling call {call_id}: {e}")
            self._update_call_status(call_id, "failed", str(e))
        finally:
            if call_id in self.current_calls:
                del self.current_calls[call_id]
    
    def _make_call(self, phone_number, message):
        """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏à‡∏£‡∏¥‡∏á - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö hardware"""
        try:
            if not phone_number:
                print("‚ö†Ô∏è No phone number provided")
                return False
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ espeak ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text-to-speech (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ speaker)
            self._play_voice_message(message)
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏™‡πà‡∏á SMS ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ GSM module)
            # success = self._send_sms(phone_number, message)
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ VoIP service (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ internet)
            # success = self._make_voip_call(phone_number, message)
            
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô webhook
            success = self._send_webhook_notification(phone_number, message)
            
            return success
            
        except Exception as e:
            print(f"‚ùå Error making call: {e}")
            return False
    
    def _play_voice_message(self, message):
        """‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        try:
            # ‡πÉ‡∏ä‡πâ espeak ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text-to-speech
            subprocess.run(['espeak', '-s', '150', '-v', 'th', message], 
                         capture_output=True, timeout=30)
            return True
        except Exception as e:
            print(f"‚ùå Error playing voice: {e}")
            return False
    
    def _send_sms(self, phone_number, message):
        """‡∏™‡πà‡∏á SMS (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ GSM module)"""
        try:
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS ‡∏ú‡πà‡∏≤‡∏ô AT commands
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏° GSM module ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            print(f"üì± Sending SMS to {phone_number}: {message}")
            # Implementation depends on GSM module
            return True
        except Exception as e:
            print(f"‚ùå Error sending SMS: {e}")
            return False
    
    def _send_webhook_notification(self, phone_number, message):
        """‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô webhook"""
        try:
            import requests
            
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á service ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ‡πÄ‡∏ä‡πà‡∏ô LINE Notify, Discord, etc.
            webhook_url = "YOUR_WEBHOOK_URL"  # ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á webhook service
            
            payload = {
                "phone": phone_number,
                "message": message,
                "device_id": "DEVICE_01",
                "timestamp": datetime.now().isoformat()
            }
            
            response = requests.post(webhook_url, json=payload, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            print(f"‚ùå Error sending webhook: {e}")
            return False
    
    def _update_call_status(self, call_id, status, error=None):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£"""
        from .firebase import DEVICE_ID
        
        try:
            status_data = {
                "status": status,
                "timestamp": datetime.now().isoformat()
            }
            
            if error:
                status_data["error"] = error
            
            db_handler.child("devices").child(DEVICE_ID).child("commands").child("calls").child(call_id).child("status").set(status_data, user_token)
            
        except Exception as e:
            print(f"‚ùå Error updating call status: {e}")

# Global instance
call_handler = CallHandler()

def initialize_call_handler():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô call handler"""
    call_handler.start_listening()

def cleanup_call_handler():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î call handler"""
    call_handler.stop_listening()
