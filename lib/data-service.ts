// lib/data-service.ts

import { HistoricalData, DailyStats, Report, SafetyEvent } from "./types";
import { get, ref } from "firebase/database";
import { db } from "./firebase";
import { analyzeSafetyData } from "./data-analyzer";

/**
 * Service for handling data operations.
 * Centralizes data fetching, processing, and report generation.
 */
export const dataService = {
  /**
   * Fetches and processes safety data for a given device within a date range.
   * @param deviceId The ID of the device to fetch data for.
   * @param startDateISO The start date of the range in ISO format.
   * @param endDateISO The end date of the range in ISO format.
   * @returns A promise that resolves to the processed safety data.
   */
  async getFilteredSafetyData(deviceId: string, startDateISO: string, endDateISO: string) {
    if (!deviceId || deviceId === 'null' || deviceId === 'undefined') {
        console.warn("getFilteredSafetyData called with invalid deviceId.");
        throw new Error("Invalid Device ID provided.");
    }
    
    console.log(`üîç Querying history for device: ${deviceId} between ${startDateISO} and ${endDateISO}`);
    
    const historyRef = ref(db, `history/${deviceId}`);
    const historySnapshot = await get(historyRef);
    const allHistoryData = historySnapshot.exists() ? historySnapshot.val() : {};

    const filteredHistory = Object.entries(allHistoryData)
        .map(([id, data]) => ({ id, ...(data as Omit<HistoricalData, 'id'>) }))
        .filter(item => {
            const itemDate = new Date(item.timestamp);
            return itemDate >= new Date(startDateISO) && itemDate <= new Date(endDateISO);
        });

    console.log(`‚úÖ Found ${filteredHistory.length} history records in date range.`);
    
    const alertsRef = ref(db, `alerts/${deviceId}`);
    const alertsSnapshot = await get(alertsRef);
    const allAlertsData = alertsSnapshot.exists() ? alertsSnapshot.val() : {};

    const filteredAlerts = Object.entries(allAlertsData)
      .map(([id, data]) => ({ id, ...(data as Omit<SafetyEvent, 'id'>) }))
      .filter(item => {
          const itemDate = new Date(item.timestamp);
          return itemDate >= new Date(startDateISO) && itemDate <= new Date(endDateISO);
      });

    console.log(`‚úÖ Found ${filteredAlerts.length} alerts in date range.`);

    const events: SafetyEvent[] = [...filteredAlerts, ...filteredHistory]
      .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())
      .map(event => ({
        id: event.id,
        timestamp: event.timestamp,
        details: event.status || (event as any).details || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        severity: event.severity || 1,
        ear: (event as any).ear
      }));
    
    return analyzeSafetyData(events, deviceId, startDateISO, endDateISO);
  },

  /**
   * Generates a report with recommendations based on safety data.
   * @param data The historical data events.
   * @param stats The calculated daily statistics.
   * @returns A report object with actionable recommendations.
   */
  generateReport(data: HistoricalData[], stats: DailyStats): Report {
    const recommendations: string[] = [];
    const score = this.calculateSafetyScore(stats);

    // --- NEW: Dynamic Recommendations Logic ---
    if (score < 60) {
      recommendations.push("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà");
    }

    if (stats.criticalEvents > 5) {
      recommendations.push("‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á");
    } else if (stats.fatigueEvents > 10) {
      recommendations.push("‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏ß‡∏á‡∏Ç‡∏ì‡∏∞‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡πÜ 1-2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á");
    }

    if (stats.yawnEvents > 20) {
      recommendations.push("‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ß‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤ ‡∏Ñ‡∏ß‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ");
    }
    
    if (stats.averageEAR < 0.22 && stats.averageEAR > 0) {
        recommendations.push(`‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏∑‡∏°‡∏ï‡∏≤ (EAR) ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥ (${stats.averageEAR.toFixed(3)}) ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏ß‡∏á`);
    }

    if (recommendations.length === 0) {
      recommendations.push("‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ");
    }

    return { recommendations };
  },

  /**
   * Calculates a safety score based on daily stats.
   * @param stats The daily statistics.
   * @returns A safety score between 0 and 100.
   */
  calculateSafetyScore(stats: DailyStats): number {
    let score = 100;
    
    // Deductions based on events, with weights
    score -= (stats.criticalEvents * 5); // Critical events have a high impact
    score -= (stats.fatigueEvents * 2); // Drowsiness events have a medium impact
    score -= (stats.yawnEvents * 0.5); // Yawns have a low impact

    // Bonus for high average EAR (if data is available)
    if (stats.averageEAR > 0.3) {
      score += 5;
    }

    // Ensure score is within bounds [0, 100]
    return Math.max(0, Math.min(score, 100));
  },
};
